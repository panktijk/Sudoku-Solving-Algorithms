import time

def clear(number, r, c, grid):
    if number in grid[r]:
        return False
    if number in [row[c] for row in grid]:
        return False
    row_start = r - r%3
    row_end = row_start + 3
    col_start = c - c%3
    col_end = col_start + 3
    square = [row[col_start:col_end] for row in grid[row_start:row_end]]
    for row in square:
        if number in row:
            return False
    return True

def recurse(r, c, grid):
    if r>8:
        return grid

    if grid[r][c] == '0':
        for number in '123456789':
            if clear(number, r, c, grid):
                grid[r] = grid[r][0:c] + [number] + grid[r][c+1:]           
                c += 1
                if c > 8:
                    r += 1
                    c = 0
                solution= recurse(r, c, grid)
                if solution:
                    return solution
                c -= 1
                if c < 0:
                    r -= 1
                    c = 8
                grid[r] = grid[r][0:c] + ['0'] + grid[r][c+1:]      
    else:
        c += 1
        if c > 8:
            r += 1
            c = 0
        return recurse(r, c, grid)
        
def solve_BF(grid):
    return recurse(0, 0, grid)

start_time_test = time.clock()    
grid = [['0', '0', '3', '0', '2', '0', '6', '0', '0'], ['9', '0', '0', '3', '0', '5', '0', '0', '1'], ['0', '0', '1', '8', '0', '6', '4', '0', '0'], ['0', '0', '8', '1', '0', '2', '9', '0', '0'], ['7', '0', '0', '0', '0', '0', '0', '0', '8'], ['0', '0', '6', '7', '0', '8', '2', '0', '0'], ['0', '0', '2', '6', '0', '9', '5', '0', '0'], ['8', '0', '0', '2', '0', '3', '0', '0', '9'], ['0', '0', '5', '0', '1', '0', '3', '0', '0']]
#grid = [['4', '0', '0', '0', '0', '0', '8', '0', '5'], ['0', '3', '0', '0', '0', '0', '0', '0', '0'], ['0','0','0','7','0','0','0','0','0'], ['0','2','0','0','0','0','0','6','0'], ['0','0','0','0','8','0','4','0','0'], ['0','0','0','0','1','0','0','0','0'], ['0','0','0','6','0','3','0','7','0'], ['5','0','0','2','0','0','0','0','0'], ['1','0','4','0','0','0','0','0','0']]
solution = solve_BF(grid)
elapsed_test = time.clock() - start_time_test
print elapsed_test

'''easy_puzzles = [[['0', '0', '3', '0', '2', '0', '6', '0', '0'],['9', '0', '0', '3', '0', '5', '0', '0', '1'],['0', '0', '1', '8', '0', '6', '4', '0', '0'],['0', '0', '8', '1', '0', '2', '9', '0', '0'],['7', '0', '0', '0', '0', '0', '0', '0', '8'],['0', '0', '6', '7', '0', '8', '2', '0', '0'],['0', '0', '2', '6', '0', '9', '5', '0', '0'],['8', '0', '0', '2', '0', '3', '0', '0', '9'],['0', '0', '5', '0', '1', '0', '3', '0', '0']],[['2', '0', '0', '0', '8', '0', '3', '0', '0'],['0', '6', '0', '0', '7', '0', '0', '8', '4'],['0', '3', '0', '5', '0', '0', '2', '0', '9'],['0', '0', '0', '1', '0', '5', '4', '0', '8'],['0', '0', '0', '0', '0', '0', '0', '0', '0'],['4', '0', '2', '7', '0', '6', '0', '0', '0'],['3', '0', '1', '0', '0', '7', '0', '4', '0'],['7', '2', '0', '0', '4', '0', '0', '6', '0'],['0', '0', '4', '0', '1', '0', '0', '0', '3']],[['0', '0', '0', '0', '0', '0', '9', '0', '7'],['0', '0', '0', '4', '2', '0', '1', '8', '0'],['0', '0', '0', '7', '0', '5', '0', '2', '6'],['1', '0', '0', '9', '0', '4', '0', '0', '0'],['0', '5', '0', '0', '0', '0', '0', '4', '0'],['0', '0', '0', '5', '0', '7', '0', '0', '9'],['9', '2', '0', '1', '0', '8', '0', '0', '0'],['0', '3', '4', '0', '5', '9', '0', '0', '0'],['5', '0', '7', '0', '0', '0', '0', '0', '0']],[['0', '3', '0', '0', '5', '0', '0', '4', '0'],['0', '0', '8', '0', '1', '0', '5', '0', '0'],['4', '6', '0', '0', '0', '0', '0', '1', '2'],['0', '7', '0', '5', '0', '2', '0', '8', '0'],['0', '0', '0', '6', '0', '3', '0', '0', '0'],['0', '4', '0', '1', '0', '9', '0', '3', '0'],['2', '5', '0', '0', '0', '0', '0', '9', '8'],['0', '0', '1', '0', '2', '0', '6', '0', '0'],['0', '8', '0', '0', '6', '0', '0', '2', '0']],[['0', '2', '0', '8', '1', '0', '7', '4', '0'],['7', '0', '0', '0', '0', '3', '1', '0', '0'],['0', '9', '0', '0', '0', '2', '8', '0', '5'],['0', '0', '9', '0', '4', '0', '0', '8', '7'],['4', '0', '0', '2', '0', '8', '0', '0', '3'],['1', '6', '0', '0', '3', '0', '2', '0', '0'],['3', '0', '2', '7', '0', '0', '0', '6', '0'],['0', '0', '5', '6', '0', '0', '0', '0', '8'],['0', '7', '6', '0', '5', '1', '0', '9', '0']],[['1', '0', '0', '9', '2', '0', '0', '0', '0'],['5', '2', '4', '0', '1', '0', '0', '0', '0'],['0', '0', '0', '0', '0', '0', '0', '7', '0'],['0', '5', '0', '0', '0', '8', '1', '0', '2'],['0', '0', '0', '0', '0', '0', '0', '0', '0'],['4', '0', '2', '7', '0', '0', '0', '9', '0'],['0', '6', '0', '0', '0', '0', '0', '0', '0'],['0', '0', '0', '0', '3', '0', '9', '4', '5'],['0', '0', '0', '0', '7', '1', '0', '0', '6']],[['0', '4', '3', '0', '8', '0', '2', '5', '0'],['6', '0', '0', '0', '0', '0', '0', '0', '0'],['0', '0', '0', '0', '0', '1', '0', '9', '4'],['9', '0', '0', '0', '0', '4', '0', '7', '0'],['0', '0', '0', '6', '0', '8', '0', '0', '0'],['0', '1', '0', '2', '0', '0', '0', '0', '3'],['8', '2', '0', '5', '0', '0', '0', '0', '0'],['0', '0', '0', '0', '0', '0', '0', '0', '5'],['0', '3', '4', '0', '9', '0', '7', '1', '0']],[['4', '8', '0', '0', '0', '6', '9', '0', '2'],['0', '0', '2', '0', '0', '8', '0', '0', '1'],['9', '0', '0', '3', '7', '0', '0', '6', '0'],['8', '4', '0', '0', '1', '0', '2', '0', '0'],['0', '0', '3', '7', '0', '4', '1', '0', '0'],['0', '0', '1', '0', '6', '0', '0', '4', '9'],['0', '2', '0', '0', '8', '5', '0', '0', '7'],['7', '0', '0', '9', '0', '0', '6', '0', '0'],['6', '0', '9', '2', '0', '0', '0', '1', '8']],[['0', '0', '0', '9', '0', '0', '0', '0', '2'],['0', '5', '0', '1', '2', '3', '4', '0', '0'],['0', '3', '0', '0', '0', '0', '1', '6', '0'],['9', '0', '8', '0', '0', '0', '0', '0', '0'],['0', '7', '0', '0', '0', '0', '0', '9', '0'],['0', '0', '0', '0', '0', '0', '2', '0', '5'],['0', '9', '1', '0', '0', '0', '0', '5', '0'],['0', '0', '7', '4', '3', '9', '0', '2', '0'],['4', '0', '0', '0', '0', '7', '0', '0', '0']],[['0', '0', '1', '9', '0', '0', '0', '0', '3'],['9', '0', '0', '7', '0', '0', '1', '6', '0'],['0', '3', '0', '0', '0', '5', '0', '0', '7'],['0', '5', '0', '0', '0', '0', '0', '0', '9'],['0', '0', '4', '3', '0', '2', '6', '0', '0'],['2', '0', '0', '0', '0', '0', '0', '7', '0'],['6', '0', '0', '1', '0', '0', '0', '3', '0'],['0', '4', '2', '0', '0', '7', '0', '0', '6'],['5', '0', '0', '0', '0', '6', '8', '0', '0']]]

start_time_BF = time.time()
count=1
for puzzle in easy_puzzles:
    solution = recurse(0, 0, grid)
    print(str(count)+' out of 10 puzzles solved')
    count+=1
elapsed_BF = time.time() - start_time_BF
print('Total time taken: '+str(elapsed_BF))'''